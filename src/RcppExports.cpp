// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// multiSigma
NumericVector multiSigma(NumericMatrix signal, int deg);
RcppExport SEXP mwaved_multiSigma(SEXP signalSEXP, SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< int >::type deg(degSEXP);
    __result = Rcpp::wrap(multiSigma(signal, deg));
    return __result;
END_RCPP
}
// waveletThresh
List waveletThresh(NumericVector beta, NumericVector thr, String shrinkType, int j0, int deg);
RcppExport SEXP mwaved_waveletThresh(SEXP betaSEXP, SEXP thrSEXP, SEXP shrinkTypeSEXP, SEXP j0SEXP, SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thr(thrSEXP);
    Rcpp::traits::input_parameter< String >::type shrinkType(shrinkTypeSEXP);
    Rcpp::traits::input_parameter< int >::type j0(j0SEXP);
    Rcpp::traits::input_parameter< int >::type deg(degSEXP);
    __result = Rcpp::wrap(waveletThresh(beta, thr, shrinkType, j0, deg));
    return __result;
END_RCPP
}
// multiProj
NumericVector multiProj(NumericVector beta, int j0, int j1, int deg);
RcppExport SEXP mwaved_multiProj(SEXP betaSEXP, SEXP j0SEXP, SEXP j1SEXP, SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type j0(j0SEXP);
    Rcpp::traits::input_parameter< int >::type j1(j1SEXP);
    Rcpp::traits::input_parameter< int >::type deg(degSEXP);
    __result = Rcpp::wrap(multiProj(beta, j0, j1, deg));
    return __result;
END_RCPP
}
// multiThresh
NumericVector multiThresh(NumericMatrix signal, NumericMatrix G, NumericVector alpha, String resolution, int j0, int j1, double eta, int deg);
RcppExport SEXP mwaved_multiThresh(SEXP signalSEXP, SEXP GSEXP, SEXP alphaSEXP, SEXP resolutionSEXP, SEXP j0SEXP, SEXP j1SEXP, SEXP etaSEXP, SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< String >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< int >::type j0(j0SEXP);
    Rcpp::traits::input_parameter< int >::type j1(j1SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type deg(degSEXP);
    __result = Rcpp::wrap(multiThresh(signal, G, alpha, resolution, j0, j1, eta, deg));
    return __result;
END_RCPP
}
// multiEstimate
NumericVector multiEstimate(NumericMatrix signal, NumericMatrix G, NumericVector alpha, String resolution, String blur, NumericVector sigma, int j0, int j1, double eta, NumericVector thresh, String shrinkType, int deg);
RcppExport SEXP mwaved_multiEstimate(SEXP signalSEXP, SEXP GSEXP, SEXP alphaSEXP, SEXP resolutionSEXP, SEXP blurSEXP, SEXP sigmaSEXP, SEXP j0SEXP, SEXP j1SEXP, SEXP etaSEXP, SEXP threshSEXP, SEXP shrinkTypeSEXP, SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< String >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< String >::type blur(blurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type j0(j0SEXP);
    Rcpp::traits::input_parameter< int >::type j1(j1SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< String >::type shrinkType(shrinkTypeSEXP);
    Rcpp::traits::input_parameter< int >::type deg(degSEXP);
    __result = Rcpp::wrap(multiEstimate(signal, G, alpha, resolution, blur, sigma, j0, j1, eta, thresh, shrinkType, deg));
    return __result;
END_RCPP
}
// multiCoef
List multiCoef(NumericMatrix signal, NumericMatrix G, NumericVector alpha, int j0, int j1, int deg);
RcppExport SEXP mwaved_multiCoef(SEXP signalSEXP, SEXP GSEXP, SEXP alphaSEXP, SEXP j0SEXP, SEXP j1SEXP, SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type j0(j0SEXP);
    Rcpp::traits::input_parameter< int >::type j1(j1SEXP);
    Rcpp::traits::input_parameter< int >::type deg(degSEXP);
    __result = Rcpp::wrap(multiCoef(signal, G, alpha, j0, j1, deg));
    return __result;
END_RCPP
}
// multiWaveD
List multiWaveD(NumericMatrix signal, NumericMatrix G, NumericVector alpha, String resolution, String blur, int j0, int j1, double eta, NumericVector thresh, String shrinkType, int deg);
RcppExport SEXP mwaved_multiWaveD(SEXP signalSEXP, SEXP GSEXP, SEXP alphaSEXP, SEXP resolutionSEXP, SEXP blurSEXP, SEXP j0SEXP, SEXP j1SEXP, SEXP etaSEXP, SEXP threshSEXP, SEXP shrinkTypeSEXP, SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< String >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< String >::type blur(blurSEXP);
    Rcpp::traits::input_parameter< int >::type j0(j0SEXP);
    Rcpp::traits::input_parameter< int >::type j1(j1SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< String >::type shrinkType(shrinkTypeSEXP);
    Rcpp::traits::input_parameter< int >::type deg(degSEXP);
    __result = Rcpp::wrap(multiWaveD(signal, G, alpha, resolution, blur, j0, j1, eta, thresh, shrinkType, deg));
    return __result;
END_RCPP
}
// directDetect
bool directDetect(NumericMatrix x);
RcppExport SEXP mwaved_directDetect(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = Rcpp::wrap(directDetect(x));
    return __result;
END_RCPP
}
// boxcarDetect
bool boxcarDetect(NumericMatrix x);
RcppExport SEXP mwaved_boxcarDetect(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = Rcpp::wrap(boxcarDetect(x));
    return __result;
END_RCPP
}
// directBlur
NumericMatrix directBlur(int n, int m);
RcppExport SEXP mwaved_directBlur(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    __result = Rcpp::wrap(directBlur(n, m));
    return __result;
END_RCPP
}
// theoreticalEta
double theoreticalEta(NumericVector alpha, String blur, ComplexMatrix g_fft, NumericVector sigma);
RcppExport SEXP mwaved_theoreticalEta(SEXP alphaSEXP, SEXP blurSEXP, SEXP g_fftSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< String >::type blur(blurSEXP);
    Rcpp::traits::input_parameter< ComplexMatrix >::type g_fft(g_fftSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(theoreticalEta(alpha, blur, g_fft, sigma));
    return __result;
END_RCPP
}
