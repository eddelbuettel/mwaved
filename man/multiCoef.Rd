% Generated by roxygen2 (4.0.1): do not edit by hand
\name{multiCoef}
\alias{multiCoef}
\title{Wavelet coefficient estimation from a multichannel signal}
\usage{
multiCoef(Y, G = directG(dim(as.matrix(Y))), alpha = rep(1,
  dim(as.matrix(Y))[2]), blur = "direct", j0 = 3L, j1 = NA_integer_,
  thresh = multiThresh(as.matrix(Y), G = G, alpha = alpha, blur = blur, j0 =
  j0, j1 = j1, eta = eta, deg = 3L), eta = NA_real_, deg = 3L)
}
\arguments{
\item{thresh}{A vector of scale level thresholds to use in the wavelet thresholded estimator of the true signal. It should have enough elements to construct the required expansion with all resolutions. Namely, have j1 - j0 + 2 elements. If a single element is input, it is repeated to be the universal threshold across all resolutions.}

\item{Y}{An input signal either an n by M matrix containing the multichannel signal to be analysed (or single vector of n elements). Each of the M columns represents a channel of n observations.}

\item{G}{The input multichannel blur matrix of size n by m (needs to be the same size as the signal input). This matrix dictates the form of blur present in each of the channels.}

\item{alpha}{A numeric vector, with m elements, specifying the level of long memory for the noise process within each channel of the form alpha = 2 - 2H, where H is the Hurst parameter. If alpha is a single element, that same element is repeated across all required channels.}

\item{blur}{A character string describing which deconvolution regime is to be applied.\itemize{
\item 'direct' (default): No deconvolution required and direct signal observed. This is captured when G is an n by m matrix with all entries being zero except the first row where all elements are one.
\item 'smooth': Indirect signal observed and the blurring kernel is of regular smooth blur type.
\item 'box.car': Indirect signal observed and the blurring kernel is of box car type.}}

\item{j0}{The coarsest resolution level for the wavelet expansion.}

\item{j1}{The finest resolution level for the wavelet expansion. If unspecified, the function will compute all thresholds up to the maximum possible resolution level at j1 = log2(n) - 1.}

\item{eta}{The smoothing parameter. The default level is 2*sqrt(alpha_{l_*}) or 2*sqrt(alpha_*) for the smooth and box car case respetively. (see Kulik, Sapatinas and Wishart (2014) for details and justification)}

\item{deg}{The degree of the auxiliary polynomial used in the Meyer wavelet.}
}
\description{
Estimates the wavelet coefficiets for the underlying signal of interest embedded in the noisy multichannel deconvolution model.
}
\details{
Returns an object of type \emph{waveletCoef} including a numeric vector of size n the estimated wavelet coefficients for the signal of interest embedded in the noisy multichannel deconvolution model and an integer, \emph{j0}, that specifies the initial resolution for the coarse expansion.
}
\examples{
library(mwaved)
# Simulate the multichannel doppler signal.
m <- 3
n <- 2^10
t <- (1:n)/n
signal <- makeDoppler(n)
# Noise levels per channel
e <- rnorm(m*n)
# Create Gamma blur
shape <- seq(from = 0.5, to = 1, length = m)
scale <- rep(0.25,m)
G <- gammaBlur(n, shape = shape, scale = scale)
# Convolve the signal
X <- blurSignal(signal, G)
# Create error with custom signal to noise ratio
SNR <- c(10,15,20)
sigma <- sigmaSNR(X, SNR)
alpha <- c(0.75, 0.8, 1)
E <- multiNoise(n, sigma, alpha)
# Create noisy & blurred multichannel signal
Y <- X + E#' plot(signal, type='l', lty='dashed', main='dashed: True signal, solid: multichannel signals')
matlines(Y)
# Estimate the wavelet coefficients
estimatedCoefs <- multiCoef(Y, G, alpha = rep(1,m), blur = 'smooth')
plot(estimatedCoefs)
# Compute true wavelet coefficients
trueCoefs <- multiCoef(signal)
plot(trueCoefs)
}

