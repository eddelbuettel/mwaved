% Generated by roxygen2 (4.0.1): do not edit by hand
\name{multiProj}
\alias{multiProj}
\title{multiProj}
\usage{
multiProj(beta, j0 = 3L, j1 = log2(length(beta)) - 1, deg = 3L)
}
\arguments{
\item{beta}{A vector of wavelet coefficients to be projected to create the required output function expansion.}

\item{j0}{The coarsest resolution to be used in the projection. The first 2^{j0} elements in the beta vector are used as the coarse expansion.}

\item{j1}{The finest resolution to be used in the projection (specifies which resolution that the wavelet expansion is truncated).}

\item{deg}{The degree of the auxiliary polynomial used in the Meyer wavelet.}
}
\value{
A numeric vector of size n giving the wavelet function expansion.
}
\description{
Reconstructs a function using wavelet coefficients as input.
}
\details{
Function that takes an input of wavelet coefficients, \emph{beta} of length n and optionally a desired coarse resolution level and maximum resolution level, \emph{j1}, to create an inhomogeneous wavelet expansion starting from resolution \emph{j0} up to resolution \emph{j1}. If the maximum resolution level \emph{j1} is not specified, the full wavelet expansion will be given. Namely, for \emph{j0} <= j <= \emph{j1} and 0 <= k <= 2^j-1, \deqn{\sum_j \sum_k beta_{j,k} \psi_{j,k}.}
}
\examples{
library(mwaved)
# Make a noiseless doppler function
n <- 2^8
t <- (1:n)/n
y <- (sqrt(t * (1 - t))) * sin((2 * pi * 1.05)/(t + 0.05))
y <- y * 2.4
# Determine the wavelet coefficients
beta <- multiCoef(y)
# plot the Multi-Resolution Analysis from j0 = 3 to j1 = 5
plot(beta, lowest = 3, highest = 5)
}
\seealso{
multiCoef
}

